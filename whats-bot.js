// Importa as bibliotecas necessÃ¡rias
const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const axios = require('axios');
const moment = require('moment-timezone');
const nodemailer = require('nodemailer'); // ** Importa Nodemailer **


const API_BASE_URL = 'http://127.0.0.1:1234/v1';

const LLM_MODEL = 'llama-3.2-1b-instruct'; // <<< SUBSTITUA

const smtpConfig = {
Â  Â  host: 'smtp.gmail.com', // Ex: smtp.gmail.com, outlook.office365.com
Â  Â  port: 587, // Geralmente 587 para TLS, 465 para SSL
Â  Â  secure: false, // Use true para porta 465 (SSL), false para outras portas como 587 (TLS)
Â  Â  auth: {
Â  Â  Â  Â  user: 'gsmmendes58@gmail.com', // Seu endereÃ§o de e-mail
Â  Â  Â  Â  pass: 'ztwdogdbwbcujdty', // Sua senha ou senha de app/token
Â  Â  },
Â  Â  // Opcional: Ignorar verificaÃ§Ã£o de certificado (nÃ£o recomendado para produÃ§Ã£o)
Â  Â  // tls: { rejectUnauthorized: false }
};

const transporter = nodemailer.createTransport(smtpConfig);

// ** Verifica a conexÃ£o SMTP (opcional, boa prÃ¡tica) **
transporter.verify(function (error, success) {
Â  Â  if (error) {
Â  Â  Â  Â  console.error('Erro ao conectar ao servidor SMTP:', error);
Â  Â  } else {
Â  Â  Â  Â  console.log('Servidor SMTP pronto para receber mensagens.');
Â  Â  }
});

// ** ConfiguraÃ§Ãµes dos setores/opÃ§Ãµes de atendimento **
const sectors = [
Â  Â  {
Â  Â  Â  Â  id: 'geral',
Â  Â  Â  Â  option: '1',
Â  Â  Â  Â  name: 'Atendimento',
Â  Â  Â  Â  systemMessage: 'VocÃª Ã© o assistente de Suporte Geral. Responda a perguntas amplas e encaminhe se necessÃ¡rio.',
Â  Â  Â  Â  model: LLM_MODEL,
Â  Â  Â  Â  // ** ServiÃ§os disponÃ­veis neste setor **
Â  Â  Â  Â  services: [
Â  Â  Â  Â  Â  Â  { option: '1', name: 'Solicitar AutorizaÃ§Ã£o', type: 'general_chat' },
Â  Â  Â  Â  Â  Â  { option: '2', name: 'Cancelamento de Guias', type: 'general_chat' },
Â  Â  Â  Â  Â  Â  { option: '3', name: 'Troca de E-mail App Unimed Cliente', type: 'task', taskId: 'email_change_unimed' },
Â  Â  Â  Â  Â  Â  { option: '4', name: 'Falar com Assistente Geral', type: 'general_chat' },
Â  Â  Â  Â  Â  Â  { option: '5', name: 'Voltar para o Menu Principal', type: 'main_menu' },
Â  Â  Â  Â  ]
Â  Â  },
Â  Â  {
Â  Â  Â  Â  id: 'ti',
Â  Â  Â  Â  option: '2',
Â  Â  Â  Â  name: 'Suporte TÃ©cnico (TI)',
Â  Â  Â  Â  systemMessage: 'VocÃª Ã© o assistente de Suporte TÃ©cnico (TI). Responda a dÃºvidas gerais sobre informÃ¡tica, sistemas, hardware, software, etc. VocÃª tambÃ©m pode ajudar com a troca de e-mail do App Unimed Cliente.',
Â  Â  Â  Â  model: LLM_MODEL,
Â  Â  Â  Â  // ** ServiÃ§os disponÃ­veis neste setor **
Â  Â  Â  Â  services: [
Â  Â  Â  Â  Â  Â  Â { option: '1', name: 'Troca de E-mail App Unimed Cliente', type: 'task', taskId: 'email_change_unimed' },
Â  Â  Â  Â  Â  Â  Â { option: '2', name: 'Falar com Assistente de TI', type: 'general_chat' },
Â  Â  Â  Â  Â  Â  Â { option: '3', name: 'Voltar para o Menu Principal', type: 'main_menu' },
Â  Â  Â  Â  ]
Â  Â  },
Â  Â  {
Â  Â  Â  Â  id: '24horas',
Â  Â  Â  Â  option: '3',
Â  Â  Â  Â  name: 'Pronto Atendimento',
Â  Â  Â  Â  systemMessage: 'VocÃª Ã© o assistente de Suporte 24h. Responda a emergÃªncias ou questÃµes urgentes.',
Â  Â  Â  Â  model: LLM_MODEL,
Â  Â  Â  Â  // ** ServiÃ§os disponÃ­veis neste setor **
Â  Â  Â  Â  services: [
Â  Â  Â  Â  Â  Â  Â { option: '1', name: 'Falar com Atendimento 24h', type: 'general_chat' },
Â  Â  Â  Â  Â  Â  Â { option: '2', name: 'Voltar para o Menu Principal', type: 'main_menu' },
Â  Â  Â  Â  Â  Â  ]
Â  Â  },
Â  Â  {
Â  Â  Â  Â  id: 'Vendas',
Â  Â  Â  Â  option: '4',
Â  Â  Â  Â  name: 'Vendas',
Â  Â  Â  Â  systemMessage: 'VocÃª Ã© o assistente de Vendas. Responda a perguntas sobre produtos e serviÃ§os.',
Â  Â  Â  Â  model: LLM_MODEL,
Â  Â  Â  Â  // ** ServiÃ§os disponÃ­veis neste setor **
Â  Â  Â  Â  Â  Â  services: [
Â  Â  Â  Â  Â  Â  Â  Â  Â { option: '1', name: 'Falar com Vendas', type: 'general_chat' },
Â  Â  Â  Â  Â  Â  Â  Â  Â { option: '2', name: 'Voltar para o Menu Principal', type: 'main_menu' },
Â  Â  Â  Â  Â  Â  Â  Â  ]
Â  Â  }
];

// ** DefiniÃ§Ã£o dos fluxos/tarefas especÃ­ficas **
const tasks = {
Â  Â  'email_change_unimed': {
Â  Â  Â  Â  name: 'Troca de E-mail App Unimed Cliente',
Â  Â  Â  Â  description: 'Processo para solicitar a troca de e-mail do App Unimed Cliente.',
Â  Â  Â  Â  steps: [
Â  Â  Â  Â  Â  Â  { id: 'name', prompt: 'Por favor, informe o seu Nome Completo:', validation: (input) => input && input.length > 5 },
Â  Â  Â  Â  Â  Â  { id: 'card', prompt: 'Agora, informe o NÃºmero da sua Carteirinha (apenas nÃºmeros):', validation: (input) => /^\d+$/.test(input) && input.length > 5 },
Â  Â  Â  Â  Â  Â  { id: 'cpf', prompt: 'Informe o seu CPF (apenas nÃºmeros):', validation: (input) => /^\d{11}$/.test(input) },
Â  Â  Â  Â  Â  Â  { id: 'email', prompt: 'Por fim, informe o Novo E-mail para cadastro:', validation: (input) => /\S+@\S+\.\S+/.test(input) },
Â  Â  Â  Â  ],
Â  Â  Â  Â  // Mensagem final para o usuÃ¡rio no WhatsApp
Â  Â  Â  Â  completionMessage: (data, numeroChamado) => {
Â  Â  Â  Â  Â  Â  Â  Â  const now = moment().tz('America/Sao_Paulo');
Â  Â  Â  Â  Â  Â  Â  Â  const businessHoursEnd = moment().tz('America/Sao_Paulo').set({ hour: 18, minute: 0, second: 0, millisecond: 0 });
Â  Â  Â  Â  Â  Â  Â  Â  const isAfterHours = now.isAfter(businessHoursEnd) || now.day() === 0 || now.day() === 6;

Â  Â  Â  Â  Â  Â  Â  Â  let response = `âœ… Sua solicitaÃ§Ã£o de troca de e-mail foi registrada com sucesso **(Chamado #${numeroChamado})** para os seguintes dados:\n\n`;
Â  Â  Â  Â  Â  Â  Â  Â  response += `Nome Completo: ${data.name}\n`;
Â  Â  Â  Â  Â  Â  Â  Â  response += `NÃºmero da Carteirinha: ${data.card}\n`;
Â  Â  Â  Â  Â  Â  Â  Â  response += `CPF: ${data.cpf}\n`;
Â  Â  Â  Â  Â  Â  Â  Â  response += `Novo E-mail: ${data.email}\n\n`;
Â  Â  Â  Â  Â  Â  Â  Â  response += `**Prazo:** Sua solicitaÃ§Ã£o serÃ¡ processada em atÃ© 48 horas Ãºteis.`;

Â  Â  Â  Â  Â  Â  Â  Â  if (isAfterHours) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  response += `\n\nðŸš¨ **AtenÃ§Ã£o:** Sua solicitaÃ§Ã£o foi enviada fora do horÃ¡rio comercial (Segunda a Sexta, 8h Ã s 18h). O prazo de 48 horas Ãºteis comeÃ§a a contar a partir do prÃ³ximo dia Ãºtil.';`;
Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  response += `\n\nSua solicitaÃ§Ã£o foi enviada dentro do horÃ¡rio comercial.`;
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  response += `\n\nAssim que a alteraÃ§Ã£o for concluÃ­da, vocÃª serÃ¡ notificado (se aplicÃ¡vel pelo sistema).`;
Â  Â  Â  Â  Â  Â  Â  Â  response += `\n\nPosso ajudar com mais alguma dÃºvida geral sobre TI ou deseja voltar ao menu principal (\`!menu\`)?`;

Â  Â  Â  Â  Â  Â  Â  Â  return response;
Â  Â  Â  Â  Â  Â  },
Â  Â  Â  Â  // ** ConfiguraÃ§Ã£o de E-mail para esta tarefa **
Â  Â  Â  Â  emailRecipient: 'gsmmendes58@gmail.com',
Â  Â  Â  Â  emailSubject: 'Nova Solicitacao Troca Email App Unimed Cliente',
Â  Â  Â  Â  emailBodyFormatter: (data, chatId, numeroChamado) => {
Â  Â  Â  Â  Â  Â  Â let body = `Nova solicitacao de troca de email App Unimed Cliente recebida via WhatsApp Bot (Chat ID: ${chatId}).\n`;
Â  Â  Â  Â  Â  Â  Â body += `Numero do Chamado: ${numeroChamado}\n\n`;
Â  Â  Â  Â  Â  Â  Â body += `Dados fornecidos pelo usuario:\n\n`;
Â  Â  Â  Â  Â  Â  Â body += `Nome Completo: ${data.name}\n`;
Â  Â  Â  Â  Â  Â  Â body += `Numero da Carteirinha: ${data.card}\n`;
Â  Â  Â  Â  Â  Â  Â body += `CPF: ${data.cpf}\n`;
Â  Â  Â  Â  Â  Â  Â body += `Novo Email: ${data.email}\n\n`;
Â  Â  Â  Â  Â  Â  Â body += `--------------------\n`;
Â  Â  Â  Â  Â  Â  Â body += `Mensagem gerada automaticamente pelo bot.\n`;
Â  Â  Â  Â  Â  Â  Â body += `Horario da solicitacao: ${moment().tz('America/Sao_Paulo').format('DD/MM/YYYY HH:mm:ss')}\n`;
Â  Â  Â  Â  Â  Â  Â return body;
Â  Â  Â  Â  }
Â  Â  Â  Â  }
Â  Â  }
Â  Â  // Adicione mais definiÃ§Ãµes de tarefas aqui
;

// Mensagem do menu inicial
const initialMenuMessage = Â 'OlÃ¡! Eu sou seu assistente virtual. Por favor, escolha o setor com o qual deseja falar, digitando o nÃºmero correspondente:\n\n' +
Â  Â  sectors.map(s => `${s.option} - ${s.name}`).join('\n') +
Â  Â  '\n\nDigite `!menu` a qualquer momento para voltar a este menu.';

// Objetos de estado e histÃ³rico
const chatStates = {};
const chatHistories = {};

// --- FunÃ§Ãµes Auxiliares ---
function getSectorByOption(option) { return sectors.find(sector => sector.option === option); }
function getSectorById(id) { return sectors.find(sector => sector.id === id); }
function getTaskById(id) { return tasks[id]; }
function getSectorServices(sectorId) {
Â  Â  const sectorConfig = getSectorById(sectorId);
Â  Â  return sectorConfig ? sectorConfig.services : [];
}

// Configura o cliente do WhatsApp
const client = new Client({
Â  Â  authStrategy: new LocalAuth(),
Â  Â  puppeteer: { args: ['--no-sandbox'] }
});

// ** NOVO: Flag para verificar se o cliente estÃ¡ pronto **
let isClientReady = false;


// --- Eventos do Cliente WhatsApp ---
client.on('qr', (qr) => {
    console.log('QR RECEIVED', qr);
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Cliente WhatsApp estÃ¡ pronto!');
    // ** Define o flag como true quando o cliente estÃ¡ pronto **
    isClientReady = true;
});

client.on('authenticated', () => { console.log('Autenticado!'); });
client.on('auth_failure', msg => { console.error('Falha na autenticaÃ§Ã£o', msg); });
client.on('disconnected', (reason) => { console.log('Cliente desconectado', reason);
    // ** Opcional: Resetar o flag se desconectar **
    isClientReady = false;
});


// --- LÃ³gica Principal: Receber Mensagens e Gerenciar Estados e Tarefas ---
client.on('message', async msg => {
Â  Â  // ** NOVA VERIFICAÃ‡ÃƒO: Ignora mensagens se o cliente ainda nÃ£o estiver pronto **
Â  Â  if (!isClientReady) {
Â  Â  Â  Â  console.log(`[${msg.from}] Ignorando mensagem recebida antes do cliente estar pronto.`);
Â  Â  Â  Â  return; // Sai da funÃ§Ã£o se o cliente nÃ£o estiver pronto
Â  Â  }

Â  Â  // ** ESTAS SÃƒO AS PRÃ“XIMAS VERIFICAÃ‡Ã•ES **
Â  Â  // Ignora mensagens vazias, de status ou com mÃ­dia
Â  Â  if (msg.body === '' || msg.isStatus || msg.hasMedia) {
Â  Â  Â  Â  Â if (msg.hasMedia) console.log('Ignorando mensagem de mÃ­dia.');
Â  Â  Â  Â  return; // Sai da funÃ§Ã£o se for um desses tipos
Â  Â  }

    // ** VERIFICAÃ‡ÃƒO PARA IGNORAR GRUPOS **
    if (msg.isGroup || msg.from.endsWith('@g.us')) {
        console.log(`[${msg.from}] Mensagem de grupo ignorada.`);
        return; // Sai da funÃ§Ã£o handler sem processar mais nada para esta mensagem
    }

Â  Â  // --- A PARTIR DAQUI, VOCÃŠ TEM CERTEZA QUE Ã‰ UMA MENSAGEM NOVA, DE CHAT PRIVADO (nÃ£o vazia, nÃ£o status, nÃ£o mÃ­dia) ---
Â  Â  const chatId = msg.from;
Â  Â  const userInput = msg.body.trim();

Â  Â  if (!chatStates[chatId]) {
Â  Â  Â  Â  Â chatStates[chatId] = { state: 'initial', sectorId: null, currentTask: null, taskStep: 0, taskData: {} };
Â  Â  Â  Â  Â chatHistories[chatId] = [];
Â  Â  }

Â  Â  let currentChatState = chatStates[chatId].state;
Â  Â  let selectedSectorId = chatStates[chatId].sectorId;
Â  Â  let currentTask = chatStates[chatId].currentTask;
Â  Â  let taskStep = chatStates[chatId].taskStep;
Â  Â  let taskData = chatStates[chatId].taskData;

Â  Â  console.log(`[${chatId}] Estado: ${currentChatState}, Setor: ${selectedSectorId}, Tarefa: ${currentTask}, Passo: ${taskStep}. Input: "${userInput}"`);

Â  Â  // --- LÃ³gica de Comandos Globais ---
Â  Â  // O comando !menu agora funciona de sector_menu, in_conversation e in_task
Â  Â  if (userInput.toLowerCase() === '!menu') {
Â  Â  Â  Â  console.log(`[${chatId}] Comando !menu recebido. Resetando estado.`);
Â  Â  Â  Â  chatStates[chatId] = { state: 'awaiting_selection', sectorId: null, currentTask: null, taskStep: 0, taskData: {} };
Â  Â  Â  Â  chatHistories[chatId] = [];
Â  Â  Â  Â  await client.sendMessage(msg.from, initialMenuMessage);
Â  Â  Â  Â  return;
Â  Â  }

Â  Â  // ** Comando !sair para encerrar atendimento **
Â  Â  if (userInput.toLowerCase() === '!sair') {
Â  Â  Â  Â  console.log(`[${chatId}] Comando !sair recebido. Encerrando atendimento.`);
Â  Â  Â  Â  // Envia uma mensagem de despedida
Â  Â  Â  Â  await client.sendMessage(msg.from, 'Ok. Encerrando o atendimento. Se precisar de algo mais, me envie uma nova mensagem.');
Â  Â  Â  Â  // Limpa o estado do chat para recomeÃ§ar na prÃ³xima mensagem
Â  Â  Â  Â  delete chatStates[chatId];
Â  Â  Â  Â  delete chatHistories[chatId];
Â  Â  Â  Â  return; // Sai do handler para nÃ£o processar mais nada
Â  Â  }

Â  Â  // O comando !cancelar agora sÃ³ funciona de in_task
Â  Â  // Ao cancelar, volta para o menu de SERVIÃ‡OS do setor
Â  Â  if (currentChatState === 'in_task' && userInput.toLowerCase() === '!cancelar') {
Â  Â  Â  Â  console.log(`[${chatId}] Comando !cancelar recebido. Cancelando tarefa "${currentTask}".`);
Â  Â  Â  Â  Â const taskConfig = getTaskById(currentTask);
Â  Â  Â  Â  // Obter config do setor atual para mostrar menu de serviÃ§os
Â  Â  Â  Â  const sectorConfigAfterCancel = getSectorById(selectedSectorId);
Â  Â  Â  Â  const servicesListAfterCancel = sectorConfigAfterCancel ? sectorConfigAfterCancel.services.map(service => `${service.option} - ${service.name}`).join('\n') : 'Nenhum serviÃ§o encontrado.';
Â  Â  Â  Â  await client.sendMessage(msg.from, `Tarefa "${taskConfig ? taskConfig.name : currentTask}" cancelada. Por favor, escolha um serviÃ§o no setor "${sectorConfigAfterCancel.name}" ou digite \`!menu\` para voltar:\n\n${servicesListAfterCancel}`);
Â  Â  Â  Â  // TransiÃ§Ã£o de estado correta: volta para o menu de SERVIÃ‡OS
Â  Â  Â  Â  chatStates[chatId] = { state: 'sector_menu', sectorId: selectedSectorId, currentTask: null, taskStep: 0, taskData: {} };
Â  Â  Â  Â  Â return;
Â  Â  }


Â  Â  // --- MÃ¡quina de Estados do Chat ---
Â  Â  switch (currentChatState) {
Â  Â  Â  Â  case 'initial':
Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Novo chat. Enviando menu inicial.`);
Â  Â  Â  Â  Â  Â  Â chatStates[chatId].state = 'awaiting_selection';
Â  Â  Â  Â  Â  Â  Â chatHistories[chatId] = [];
Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, initialMenuMessage);
Â  Â  Â  Â  Â  Â  Â break;

Â  Â  Â  Â  case 'awaiting_selection':
Â  Â  Â  Â  Â  Â  console.log(`[${chatId}] Aguardando seleÃ§Ã£o de setor. Input: ${userInput}`);
Â  Â  Â  Â  Â  Â  const selectedSector = getSectorByOption(userInput);

Â  Â  Â  Â  Â  Â  if (selectedSector) {
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Setor "${selectedSector.name}" (${selectedSector.id}) selecionado.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â // ** MUDANÃ‡A: Vai para o estado sector_menu **
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].state = 'sector_menu'; // <-- MUDA O ESTADO AQUI
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].sectorId = selectedSector.id; // Salva o setor escolhido
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].currentTask = null;
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskStep = 0;
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskData = {};
Â  Â  Â  Â  Â  Â  Â  Â  Â // chatHistories[chatId] = []; // NÃ£o limpa o histÃ³rico AQUI ainda

Â  Â  Â  Â  Â  Â  Â  Â  Â // ** Envia o menu de serviÃ§os do setor **
Â  Â  Â  Â  Â  Â  Â  Â  Â const sectorServices = getSectorServices(selectedSector.id);
Â  Â  Â  Â  Â  Â  Â  Â  Â if (sectorServices.length > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const servicesList = sectorServices.map(service => {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  return `${service.option} - ${service.name}`;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â }).join('\n');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `VocÃª escolheu o setor "${selectedSector.name}".\nPor favor, selecione o serviÃ§o desejado, digitando o nÃºmero:\n\n${servicesList}`);
Â  Â  Â  Â  Â  Â  Â  Â  Â } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // Setor sem serviÃ§os definidos, vai para conversa geral diretamente?
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.warn(`[${chatId}] Setor "${selectedSector.name}" (${selectedSector.id}) sem serviÃ§os definidos.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // ** OpÃ§Ã£o: Ir direto para conversa geral se nÃ£o hÃ¡ serviÃ§os **
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].state = 'in_conversation';
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â chatHistories[chatId] = []; // Limpa histÃ³rico geral ao iniciar conversa geral
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `VocÃª escolheu o setor "${selectedSector.name}". NÃ£o hÃ¡ serviÃ§os especÃ­ficos listados. Pode digitar sua pergunta para o assistente.`);

Â  Â  Â  Â  Â  Â  Â  Â  Â }


Â  Â  Â  Â  Â  Â  Â } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] SeleÃ§Ã£o invÃ¡lida: "${userInput}". Reenviando menu.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, 'OpÃ§Ã£o invÃ¡lida. Por favor, digite apenas o nÃºmero do setor desejado.\n\n' + initialMenuMessage);
Â  Â  Â  Â  Â  Â  Â  Â  Â // Permanece no estado 'awaiting_selection'
Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â break;

Â  Â  Â  Â  // ** NOVO ESTADO: Menu de ServiÃ§os do Setor **
Â  Â  Â  Â  case 'sector_menu':
Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Em menu de serviÃ§o do setor "${selectedSectorId}". Input: ${userInput}`);
Â  Â  Â  Â  Â  Â  Â const sectorConfigForMenu = getSectorById(selectedSectorId);
Â  Â  Â  Â  Â  Â  Â const sectorServicesForMenu = sectorConfigForMenu ? sectorConfigForMenu.services : [];

Â  Â  Â  Â  Â  Â  Â const selectedServiceOption = sectorServicesForMenu.find(service => service.option === userInput);

Â  Â  Â  Â  Â  Â  Â if (selectedServiceOption) {
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] ServiÃ§o "${selectedServiceOption.name}" (${selectedServiceOption.option}) selecionado no setor "${selectedSectorId}".`);

Â  Â  Â  Â  Â  Â  Â  Â  Â // Limpa o histÃ³rico GERAL ao sair do menu de serviÃ§os
Â  Â  Â  Â  Â  Â  Â  Â  Â chatHistories[chatId] = []; // Limpa histÃ³rico

Â  Â  Â  Â  Â  Â  Â  Â  Â switch (selectedServiceOption.type) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â case 'task':
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const taskConfigFromService = getTaskById(selectedServiceOption.taskId);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (taskConfigFromService && taskConfigFromService.steps && taskConfigFromService.steps.length > 0) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Iniciando tarefa "${taskConfigFromService.name}" (${selectedServiceOption.taskId}).`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].state = 'in_task';
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].currentTask = selectedServiceOption.taskId;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskStep = 1; // ComeÃ§a no passo 1
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskData = {}; // Limpa dados de tarefas anteriores

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const firstStep = taskConfigFromService.steps[0];
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `Ok, vamos iniciar o processo "${taskConfigFromService.name}".\n\n${firstStep.prompt}\n\nDigite \`!cancelar\` a qualquer momento para sair.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.warn(`[${chatId}] Tarefa "${selectedServiceOption.taskId}" encontrada no serviÃ§o, mas sem passos definidos.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const servicesList = sectorServicesForMenu.map(service => `${service.option} - ${service.name}`).join('\n');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `Ocorreu um problema. Por favor, selecione outro serviÃ§o no setor "${sectorConfigForMenu.name}" ou digite \`!menu\` para voltar:\n\n${servicesList}`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â break;

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â case 'general_chat':
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.log(`[${chatId}] Iniciando conversa geral no setor "${selectedSectorId}".`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  chatStates[chatId].state = 'in_conversation';
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // chatHistories[chatId] jÃ¡ foi limpo acima
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await client.sendMessage(msg.from, `VocÃª escolheu conversar com o assistente de ${sectorConfigForMenu.name}. Pode digitar sua pergunta.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â break;

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â case 'main_menu':
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.log(`[${chatId}] Voltando para o menu principal.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  chatStates[chatId] = { state: 'awaiting_selection', sectorId: null, currentTask: null, taskStep: 0, taskData: {} };
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  // chatHistories[chatId] jÃ¡ foi limpo acima
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await client.sendMessage(msg.from, initialMenuMessage);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â break;

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â default:
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.warn(`[${chatId}] Tipo de serviÃ§o desconhecido "${selectedServiceOption.type}".`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  const servicesList = sectorServicesForMenu.map(service => `${service.option} - ${service.name}`).join('\n');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await client.sendMessage(msg.from, `OpÃ§Ã£o invÃ¡lida. Por favor, selecione um serviÃ§o na lista:\n\n${servicesList}`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // Permanece no estado sector_menu
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â break;
Â  Â  Â  Â  Â  Â  Â  Â  Â }

Â  Â  Â  Â  Â  Â  Â } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  console.log(`[${chatId}] SeleÃ§Ã£o de serviÃ§o invÃ¡lida: "${userInput}". Reenviando menu de serviÃ§os.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â const servicesList = sectorServicesForMenu.map(service => `${service.option} - ${service.name}`).join('\n');
Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `OpÃ§Ã£o invÃ¡lida. Por favor, selecione um serviÃ§o na lista:\n\n${servicesList}`);
Â  Â  Â  Â  Â  Â  Â  Â  Â // Permanece no estado sector_menu
Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â break;


Â  Â  Â  Â  case 'in_conversation':
Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Em conversa geral no setor "${selectedSectorId}".`);

Â  Â  Â  Â  Â  Â  Â const sectorConfig = getSectorById(selectedSectorId);
Â  Â  Â  Â  Â  Â  Â if (!sectorConfig) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error(`[${chatId}] Erro: Setor "${selectedSectorId}" nÃ£o encontrado! Voltando para o menu.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  chatStates[chatId] = { state: 'awaiting_selection', sectorId: null, currentTask: null, taskStep: 0, taskData: {} };
Â  Â  Â  Â  Â  Â  Â  Â  Â  chatHistories[chatId] = [];
Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, 'Ocorreu um erro no setor. Por favor, escolha o setor novamente.\n\n' + initialMenuMessage);
Â  Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  Â }

Â  Â  Â  Â  Â  Â  Â // NÃ£o verifica mais !iniciar aqui, pois o inÃ­cio da tarefa Ã© feito pelo menu de serviÃ§o
Â  Â  Â  Â  Â  Â  Â // O comando !menu jÃ¡ Ã© tratado no inÃ­cio do handler

Â  Â  Â  Â  Â  Â  Â // --- Processar mensagem com LM Studio ---
Â  Â  Â  Â  Â  Â  Â if (!userInput.toLowerCase().startsWith('!')) { // SÃ³ processa com LM se nÃ£o for comando como !menu ou !cancelar (embora esses sejam tratados globalmente agora)
Â  Â  Â  Â  Â  Â  Â  Â  Â if (!chatHistories[chatId]) chatHistories[chatId] = [];
Â  Â  Â  Â  Â  Â  Â  Â  Â chatHistories[chatId].push({ role: 'user', content: msg.body });
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Chamando LM Studio para conversa geral em ${sectorConfig.name} (${sectorConfig.model})...`);
Â  Â  Â  Â  Â  Â  Â  Â  Â try {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const messagesForApi = [
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â { role: 'system', content: sectorConfig.systemMessage }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â ].concat(chatHistories[chatId]);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const payload = {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â model: sectorConfig.model || LLM_MODEL, // Usando LLM_MODEL do cÃ³digo fornecido
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â messages: messagesForApi,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â temperature: 0.7,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â max_tokens: 500
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â };
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await msg.getChat().then(chat => chat.sendStateTyping());
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const response = await axios.post(`${API_BASE_URL}/chat/completions`, payload);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const generatedText = response.data.choices[0].message.content;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â if (generatedText) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â chatHistories[chatId].push({ role: 'assistant', content: generatedText });
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, generatedText.trim());
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Resposta geral enviada para ${sectorConfig.name}:`, generatedText.trim());
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const historyLimit = 20;
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (chatHistories[chatId].length > historyLimit) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  chatHistories[chatId] = chatHistories[chatId].slice(chatHistories[chatId].length - historyLimit);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.log(`[${chatId}] HistÃ³rico geral limitado para ${historyLimit} pares.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.warn(`[${chatId}] Resposta da API vazia para conversa geral em ${sectorConfig.name}.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, 'Desculpe, nÃ£o consegui gerar uma resposta neste setor.');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â }

Â  Â  Â  Â  Â  Â  Â  Â  Â } catch (error) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.error(`\n--- Erro ao chamar LM Studio para conversa geral em ${sectorConfig.name} (${chatId}) ---`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  if (error.response) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error('Status:', error.response.status);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error('Dados do Erro:', error.response.data);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await client.sendMessage(msg.from, `[${sectorConfig.name}] Erro da API (${error.response.status}) na conversa geral. Verifique o console.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else if (error.request) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error('Erro na requisiÃ§Ã£o:', error.request);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await client.sendMessage(msg.from, `[${sectorConfig.name}] Erro ao comunicar com o servidor LM Studio na conversa geral. Verifique se estÃ¡ rodando.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error(`[${chatId}] Erro:`, error.message);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  await client.sendMessage(msg.from, `[${sectorConfig.name}] Erro interno: ${error.message}`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error('---------------------------------------');
Â  Â  Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â } // Fim do if (!userInput.toLowerCase().startsWith('!'))
Â  Â  Â  Â  Â  Â  Â break; // Fim do case 'in_conversation'

Â  Â  Â  Â  case 'in_task':
Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Em tarefa "${currentTask}" passo ${taskStep}. Input: ${userInput}`);

Â  Â  Â  Â  Â  Â  Â const taskConfig = getTaskById(currentTask);
Â  Â  Â  Â  Â  Â  Â // Corrigido: Ao encontrar erro na tarefa, volta para o menu de SERVIÃ‡OS
Â  Â  Â  Â  Â  Â  Â if (!taskConfig || !taskConfig.steps || taskStep <= 0 || taskStep > taskConfig.steps.length) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  console.error(`[${chatId}] Erro: Tarefa "${currentTask}" ou passo ${taskStep} invÃ¡lido. Voltando para menu de serviÃ§os.`);

Â  Â  Â  Â  Â  Â  Â  Â  Â // Obter config do setor atual para mostrar menu de serviÃ§os
Â  Â  Â  Â  Â  Â  Â  Â  Â const sectorConfigOnError = getSectorById(selectedSectorId);
Â  Â  Â  Â  Â  Â  Â  Â  Â const servicesListOnError = sectorConfigOnError ? sectorConfigOnError.services.map(service => `${service.option} - ${service.name}`).join('\n') : 'Nenhum serviÃ§o encontrado.';

Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `Ocorreu um problema na tarefa. Voltando para o menu de serviÃ§os do setor "${sectorConfigOnError.name}".\n\n${servicesListOnError}`);

Â  Â  Â  Â  Â  Â  Â  Â  Â // TransiÃ§Ã£o de estado correta
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].state = 'sector_menu'; // Volta para o menu de SERVIÃ‡OS
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].currentTask = null;
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskStep = 0;
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskData = {};
Â  Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  Â  }

Â  Â  Â  Â  Â  Â  Â const currentStep = taskConfig.steps[taskStep - 1];

Â  Â  Â  Â  Â  Â  Â // ** ValidaÃ§Ã£o e Armazenamento do Input do Passo Atual **
Â  Â  Â  Â  Â  Â  Â if (currentStep.validation && !currentStep.validation(userInput)) {
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] ValidaÃ§Ã£o falhou para o passo ${taskStep}. Input: "${userInput}".`);
Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `Entrada invÃ¡lida para este passo. Por favor, ${currentStep.prompt}\n\nDigite \`!cancelar\` a qualquer momento para sair da tarefa.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  return;
Â  Â  Â  Â  Â  Â  Â }

Â  Â  Â  Â  Â  Â  Â taskData[currentStep.id] = userInput;
Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskData = taskData;


Â  Â  Â  Â  Â  Â  Â // ** AvanÃ§ar para o PrÃ³ximo Passo ou Completar a Tarefa **
Â  Â  Â  Â  Â  Â  Â const nextStepIndex = taskStep;
Â  Â  Â  Â  Â  Â  Â if (nextStepIndex < taskConfig.steps.length) {
Â  Â  Â  Â  Â  Â  Â  Â  Â // Ainda hÃ¡ passos restantes
Â  Â  Â  Â  Â  Â  Â  Â  Â const nextStep = taskConfig.steps[nextStepIndex];
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskStep = taskStep + 1;
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Passo ${taskStep} completo. PrÃ³ximo passo ${taskStep + 1}.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `${nextStep.prompt}\n\nDigite \`!cancelar\` a qualquer momento para sair da tarefa.`);

Â  Â  Â  Â  Â  Â  Â } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â // Todos os passos completos!
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Todos os passos da tarefa "${currentTask}" completos.`);

Â  Â  Â  Â  Â  Â  Â  Â  Â // --- AÃ§Ã£o de ConclusÃ£o da Tarefa ---

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // ** Gerar nÃºmero aleatÃ³rio para o chamado **
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // Combina timestamp com nÃºmero aleatÃ³rio pequeno para razoÃ¡vel unicidade
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const numeroChamado = Date.now() + Math.floor(Math.random() * 1000);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Gerado nÃºmero de chamado: #${numeroChamado}`);


Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // 1. Enviar mensagem de conclusÃ£o para o usuÃ¡rio no WhatsApp
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // ** Passando numeroChamado **
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const completionMessageText = taskConfig.completionMessage(taskData, numeroChamado); // <-- Passe numeroChamado aqui
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, completionMessageText); // Use a variÃ¡vel com o texto gerado
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Mensagem de conclusÃ£o da tarefa "${currentTask}" enviada para o usuÃ¡rio.`);


Â  Â  Â  Â  Â  Â  Â  Â  Â // 2. Enviar E-mail para o setor responsÃ¡vel
Â  Â  Â  Â  Â  Â  Â  Â  Â if (taskConfig.emailRecipient) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const mailOptions = {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â from: smtpConfig.auth.user,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â to: taskConfig.emailRecipient,
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // ** Incluindo numeroChamado no assunto **
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â subject: `[Chamado #${numeroChamado}] ${taskConfig.emailSubject || `Nova Tarefa Concluida: ${taskConfig.name}`}`, // <-- Inclua aqui
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // ** Passando numeroChamado para o formatter **
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â text: taskConfig.emailBodyFormatter ? taskConfig.emailBodyFormatter(taskData, chatId, numeroChamado) : `Dados da tarefa "${taskConfig.name}":\n${JSON.stringify(taskData, null, 2)}`, // <-- Passe numeroChamado aqui
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // html: '<b>Corpo do e-mail em HTML</b>' // Opcional: corpo em HTML
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â };

Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Tentando enviar e-mail para ${taskConfig.emailRecipient}...`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â try {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â const info = await transporter.sendMail(mailOptions);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] E-mail enviado com sucesso: ${info.messageId}`);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â } catch (emailError) {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.error(`[${chatId}] Erro ao enviar e-mail para ${taskConfig.emailRecipient}:`, emailError);
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, 'Ocorreu um problema ao enviar a notificaÃ§Ã£o por e-mail. Por favor, tente novamente mais tarde ou entre em contato por outro canal se for urgente.');
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â }
Â  Â  Â  Â  Â  Â  Â  Â  Â } else {
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â console.warn(`[${chatId}] Tarefa "${currentTask}" concluÃ­da, mas nenhum destinatÃ¡rio de e-mail configurado (emailRecipient).`);
Â  Â  Â  Â  Â  Â  Â  Â  Â }

Â  Â  Â  Â  Â  Â  Â  Â  Â // ** Finaliza a tarefa e volta para o menu de SERVIÃ‡OS do setor **
Â  Â  Â  Â  Â  Â  Â  Â  Â console.log(`[${chatId}] Tarefa "${currentTask}" completa. Voltando para menu de serviÃ§os.`);
Â  Â  Â  Â  Â  Â  Â  Â  Â // Obter config do setor atual para mostrar menu de serviÃ§os
Â  Â  Â  Â  Â  Â  Â  Â  Â const sectorConfigAfterTask = getSectorById(selectedSectorId);
Â  Â  Â  Â  Â  Â  Â  Â  Â const servicesListAfterTask = sectorConfigAfterTask ? sectorConfigAfterTask.services.map(service => `${service.option} - ${service.name}`).join('\n') : 'Nenhum serviÃ§o encontrado.';

Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].state = 'sector_menu'; // Volta para o menu de SERVIÃ‡OS
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].currentTask = null;
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskStep = 0;
Â  Â  Â  Â  Â  Â  Â  Â  Â chatStates[chatId].taskData = {}; // Limpa os dados coletados da tarefa

Â  Â  Â  Â  Â  Â  Â  Â  Â // Avisa o usuÃ¡rio e mostra novamente o menu de serviÃ§os
Â  Â  Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, `Tarefa concluÃ­da. Por favor, escolha outro serviÃ§o no setor "${sectorConfigAfterTask.name}" ou digite \`!menu\` para voltar:\n\n${servicesListAfterTask}`);

Â  Â  Â  Â  Â  Â  Â } // Fim do else (tarefa completa)

Â  Â  Â  Â  Â  Â  break; // Fim do case 'in_task'


Â  Â  Â  Â  default:
Â  Â  Â  Â  Â  Â  Â // Estado desconhecido
Â  Â  Â  Â  Â  Â  Â console.warn(`[${chatId}] Estado desconhecido "${currentChatState}". Resetando para menu.`);
Â  Â  Â  Â  Â  Â  Â chatStates[chatId] = { state: 'awaiting_selection', sectorId: null, currentTask: null, taskStep: 0, taskData: {} };
Â  Â  Â  Â  Â  Â  Â chatHistories[chatId] = [];
Â  Â  Â  Â  Â  Â  Â await client.sendMessage(msg.from, 'Estado invÃ¡lido. Por favor, escolha o setor novamente.\n\n' + initialMenuMessage);
Â  Â  Â  Â  Â  Â  Â break;

Â  Â  } // Fim do switch

}); // Fim do client.on('message', ...)


// Inicia o cliente WhatsApp
console.log('Iniciando cliente WhatsApp (NÃºmero Principal)...');
client.initialize()